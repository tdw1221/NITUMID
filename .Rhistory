result7[[scaling+1]]=deconvo_result0}
#8th column, 1:3 rows
result8=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y_normal_row,lam_W = lam_W, beta_W = beta_W, A=A,eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1,perm_type=0)
result8[[scaling+1]]=deconvo_result1}
#9th column, 1:3 rows
result9=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1,perm_type=0)
result9[[scaling+1]]=deconvo_result2}
result_non_permut=list(result1,result2,result3,result4,result5,result6,result7,result8,result9)
###################################end of no permutation case#########################################
##################################start of permutation section#######################################
# browser()
Y <- as.matrix(Y)
ncolY=ncol(Y); rand_perm=sample(1:ncolY)
Y2=as.matrix(Y[,rand_perm])
if (test_mode==T){
real_H_permut <- real_H[,rand_perm]
}
##Iterate over beta=0.05,beta=100 and data-dependent beta
Y2_normal_row <- as.matrix(Y2/row_mean[row_index])
Y2_normal_row_col <- as.matrix(sqrt( nrow(Y2_normal_row) )*t(t(Y2_normal_row)/sqrt(apply(Y2_normal_row^2, 2,sum))))
##first specification of parameter
##non data dependent
lam_W =5000;
beta_W = 0.05; eta=200;
result1=list(1)
#1st column, 1:3 rows
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result1[[scaling+1]]=deconvo_result0}
#2nd column, 1:3 rows
result2=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result2[[scaling+1]]=deconvo_result1}
#3rd column, 1:3 rows
result3=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result3[[scaling+1]]=deconvo_result2}
##second specification of parameter
##non data dependent
lam_W =5000;
beta_W = 100; eta=200;
#4th column, 1:3 rows
result4=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result4[[scaling+1]]=deconvo_result0}
#5th column, 1:3 rows
result5=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result5[[scaling+1]]=deconvo_result1}
#6th column, 1:3 rows
result6=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result6[[scaling+1]]=deconvo_result2}
##3rd specification of parameter
##data dependent
reg_para=1
#7th column, 1:3 rows
result7=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result7[[scaling+1]]=deconvo_result0}
#8th column, 1:3 rows
result8=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result8[[scaling+1]]=deconvo_result1}
#9th column, 1:3 rows
result9=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result9[[scaling+1]]=deconvo_result2}
result_permut=list(result1,result2,result3,result4,result5,result6,result7,result8,result9)
##in the test mode, if the labelled data has different cell types with us, we rearrange the results based on cell_structure
transform_H <- function(input_H,cell_structure){
dest_index <- sort(unique(cell_structure$destin_index))
outcome_H <- matrix(rep(0,ncol(input_H)*max(dest_index)),ncol=ncol(input_H))
for (i in 1:num_cell){
if ( !is.na(cell_structure$destin_index[i]) ){
outcome_H[cell_structure$destin_index[i],] <- outcome_H[cell_structure$destin_index[i],]+input_H[i,]
}
}
return(outcome_H)
}
##################end of function##########################
################generate output consistency table##########
#fxn for K-L divergence
kl_div_disc <- function(aa,bb){
aa=aa/sum(aa); bb=bb/sum(bb); clength=length(aa); aa=pmax(aa,10^(-30)); bb=pmax(bb,10^(-30));
return(sum(aa*log(aa/bb)))}
for (i1 in 1:9){
for (i2 in 1:3){
consistency_table[i1,i2]=mean(diag(cor(result_permut[[i1]][[i2]]$H,(result_non_permut[[i1]][[i2]]$H[,rand_perm]) ) ) )
}}
######generate output real correlation table (onlly in test mode)########
if (test_mode==T){
for (i1 in 1:9){
for (i2 in 1:3){
if (correlation=="p"){
real_corr_table[i1,i2]=mean(diag(cor(transform_H(result_non_permut[[i1]][[i2]]$H, cell_structure),(real_H))))
}
if (correlation=="s"){
real_corr_table[i1,i2]=mean(diag(cor(transform_H(result_non_permut[[i1]][[i2]]$H, cell_structure),(real_H),method = "spearman" ) ) )
}
if (correlation=="kl"){
temp_kl <- rep(-1,ncol(Y))
trans_H<-transform_H(result_non_permut[[i1]][[i2]]$H , cell_structure)
for (kl in 1:4){
temp_kl[kl] <- kl_div_disc( aa = real_H[,kl], bb=trans_H[,kl])
}
real_corr_table[i1,i2]=mean(temp_kl)
}
}}
}
#####Final Quality Control Stage######
#filtered by column sum
#column sum table for 27 Hs
H_dist=array(0,c(9,3))
for (i1 in 1:9){
for (i2 in 1:3){
H_dist[i1,i2]=mean(apply(result_non_permut[[i1]][[i2]]$H,2,sum))
}
}
report_consistency_table<-consistency_table*(H_dist<1.1)
#rreal_tab1
#consider_col=1:9;   #c(1,4,7)
#thres_H=1.05;   # thres_H=200
#rankk=cbind(1:27, -as.vector(ccons_tab[,consider_col]*(H_dist[,consider_col]<thres_H)), as.vector(rreal_tab1[,consider_col]))
#rankk2=rankk[order(rankk[,2]),]
#plot(1:27, rankk2[,3])
#####output results#############
if (test_mode==T){
return(list(consistency_table=report_consistency_table,real_corr_table=real_corr_table,real_corr_table=real_corr_table,result_non_permut=result_non_permut))}
else {
return(list(consistency_table=report_consistency_table,result_non_permut=result_non_permut))
}
}
real_mix_out_original <- NMF_Meta_April13(Y = real_mix_gene_expr,A = A_melanoma_v5,real_H = real_H_mix,row_index = seq(1,53),cell_structure = cell_structure_real_mix,correlation = "p",test_mode = T,row_mean = row_mean_v5)
real_mix_out_original$real_corr_table
real_H
cell_structure
real_mix_out_original <- NMF_Meta_April13(Y = real_mix_gene_expr,A = A_melanoma_v5,real_H = real_H_mix,row_index = seq(1,53),cell_structure = cell_structure_real_mix,correlation = "s",test_mode = T,row_mean = row_mean_v5)
real_mix_out_original$real_corr_table
library("fastICA")
library("gtools")
library("rlist")
###############################This is the code collection for functions used in NMF deconvolution#####################
####April 14th, in this version we removed beta_H in our functions
##Updata W
Update_W_Tang <- function(Y,W_itr,H_itr,beta_W,lam_W,A){
#dimension
m <- nrow(Y)
n <- ncol(Y)
r <- ncol(W_itr)
#generate diagonal matrix
I_rr <- diag(x=rep(1,r))
#numerator
num <- Y%*%t(H_itr)
denom <- W_itr%*%H_itr%*%t(H_itr)+beta_W*W_itr%*%I_rr+lam_W*A
denom = pmax(denom, 0.000000000000001*array(1,c(dim(denom)[1],dim(denom)[2])))
#update
W_new <- W_itr * num/denom
W_new[which(W_new < 0)] <- 0
##return
return(W_new)
}
##Updata H
Update_H_Tang <- function(Y,W_itr,H_itr,eta){
#dimension
m <- nrow(Y)
n <- ncol(Y)
r <- ncol(W_itr)
#generate diagonal matrix
E_rr <- matrix(rep(1,r*r),ncol=r)
E_rn <- matrix(rep(1,r*n),ncol=n)
#update
num <- t(W_itr)%*%Y  + eta*E_rn
denom <- t(W_itr)%*%W_itr%*%H_itr + eta*E_rr%*%H_itr #+ beta_H*H_itr
denom= pmax(denom, 0.000000000000001*array(1,c(dim(denom)[1],dim(denom)[2])))
H_new <- H_itr*(num/denom)
H_new[which(H_new<0)] <- 0
#return
return(H_new)
}
##NMF Core Function
NMF_RNA_Tang <- function(Y,ini.W,ini.H,lam_W, beta_W, A, eta, tol=10^-5,prterr=F,max.itr=2000,always=T){
#obtain the dimensions
m <- nrow(ini.W)
r <- ncol(ini.W)
#initialization
itr_num <- 0
W_itr <- ini.W
H_itr <- ini.H
#record err
err_change =NULL; err_change_diff =NULL; err_change_W =NULL ; err_change_H =NULL
while (itr_num < max.itr  ){
W_itr0=W_itr; H_itr0=H_itr;
H_itr=Update_H_Tang(Y = Y,W_itr = W_itr,H_itr = H_itr,eta = eta)
W_itr <- Update_W_Tang(Y = Y, W_itr = W_itr,H_itr = H_itr,beta_W = beta_W, lam_W=lam_W,A=A )
err <-   norm(Y-W_itr%*%H_itr,type = "f")
err_diff= norm(W_itr%*%H_itr-W_itr0%*%H_itr0,type = "f")
err_W <- norm(W_itr-W_itr0,type = "f")
err_H = norm(H_itr-H_itr0,type = "f")
err_change=c(err_change,log(err));
err_change_diff=c(err_change_diff,log(err_diff));
err_change_W=c(err_change_W,log(err_W));
err_change_H=c(err_change_H,log(err_H));
itr_num <- itr_num + 1
if (prterr==T){print(err)}
#if (err_diff < tol ) {return(list(W=W_itr,H=H_itr,err=err_change,step=itr_num,err_diff=err_change_diff,err_W=err_change_W, err_H=err_change_H))}
}
if (always==T){
return(list(W=W_itr,H=H_itr,err=err_change,step=itr_num,err_diff=err_change_diff,err_W=err_change_W, err_H=err_change_H))
}
else {return(NA)}
}
##NMF Wrapped up Function
##This function includes data_initialization, data_scaling and
NMF_RNA_Tang_ind <- function(Y,lam_W, beta_W, A,eta, tol=10^-5,prterr=F,max.itr=2000,always=F,num_cell=11,normal_H=T,scale_Data, reg_para, perm_type=2){
#loading required packages
library("fastICA")
library("gtools")
library("rlist")
#raw_process data
#browser()
#make sure Y is a matrix bc sometimes we have only 1 sample
Y <- as.matrix(Y)
n1=dim(Y)[1]; n2=dim(Y)[2];
#browser()
#need to specify data scaling method, 0 means do not scale, 1 means scale by Frobeniues Norm, 2 means scaling by log-frobeniues norm
if (scale_Data==0){
Y_scale=as.matrix(Y) }
else if (scale_Data==1){
Y_scale=as.matrix(sqrt(n1*n2)*Y/norm(Y,'f'));}
else {
log_norm=norm(log(Y+1),'f')
Y_scale <- as.matrix(log_norm*Y/norm(Y,'f'))
}
##add a little noise to make results more robust
if (perm_type==2){
#browser()
Y_scale=Y_scale+ matrix(rnorm(dim(Y_scale)[1]*dim(Y_scale)[2],0, 0.1*sd(Y_scale)),ncol=dim(Y_scale)[2])}
Y_scale=pmax(Y_scale, array(0,c(dim(Y_scale)[1],dim(Y_scale)[2])))
#data dependent way to choose lambda beta and eta
if (reg_para==1){
#browser()
if (ncol(Y_scale)==1){
ICA_result <- fastICA(cbind(Y_scale,Y_scale),n.comp = 11,alg.typ = "parallel",fun="exp",method="C")
ini.W <- abs(ICA_result$S)
ini.H <- abs(ICA_result$A[,1])
}
else{
#browser()
ICA_result <- fastICA(1*Y_scale,n.comp = 11,alg.typ = "parallel",fun="exp",method="C")
ini.W <- abs(ICA_result$S)
ini.H <- abs(ICA_result$A)
}
ttt=t(ini.W)%*%(1*Y_scale-ini.W%*%ini.H)
ttt2=(Y_scale-ini.W%*%ini.H) %*% t(ini.H)
lam_W=1*max(abs(ttt2));
beta_W = 0.05;
eta=1*max(abs(ttt));
}
#browser()
ini.W=abs(matrix(rnorm(dim(Y_scale)[1]*num_cell),dim(Y_scale)[1]))
ini.H=abs(matrix(rnorm(num_cell*dim(Y_scale)[2]),num_cell))
ini.W=1-A
ini.H=array(1,c(dim(ini.H)[1],dim(ini.H)[2]))
#NMF
return(NMF_RNA_Tang(Y_scale,ini.W,ini.H,lam_W, beta_W, A, eta, tol=tol,prterr=F,max.itr=max.itr))
}
#A function to test the outcome (purified cells)
Test_Deconvo <- function(deconvo_result,A_ref,correct_H){
#test the structure concordance with A-ref
rot_ind2=array(0,c(nrow(deconvo_result$W),ncol(deconvo_result$W)))
for (ii in 1:nrow(deconvo_result$W)){
rot_ind2[ii,which(deconvo_result$W[ii,]==max(deconvo_result$W[ii,]))]<-1
}
#how diff
W_diff<-length(which(rot_ind2 != 1-A_ref))/(dim(A_ref)[1]*dim(1-A_ref)[2])
#how accurate H is
#by max
len <- ncol(deconvo_result$H)
indi <- 0
for (i in 1:len){
if (which(deconvo_result$H[,i]==max(deconvo_result$H[,i]))==which(correct_H[,i]==max(correct_H[,i]))   ){
indi <- indi +1
}
}
max_right_ratio <- indi/len
return(list(err=deconvo_result$err[deconvo_result$step],err_diff=deconvo_result$err_diff[deconvo_result$step],W=rot_ind2,W_diff_rate=W_diff,H_max_right=max_right_ratio))
}
##this structure indexing object is used for accounting for the fact that some datasets do not have all cell types' information
##the 1st column of cell_structure denote cell types 1-11
##the 2nd column of cell_structure denote in test data the corresponding cell's index
##if we were to merge 1,2,3 cells in our original list into 1 cell types, we specify the corresponding rows in destin_index with the same value
##if we do not want to consider one cell type, we just give a NA value in the corresponding postition in the 2nd column
cell_structure_example  <- data.frame(original_index = seq(1,11),destin_index =seq(1,11))
rownames(cell_structure_example) <- unique(final_marker_v5$Cell)
##If do not use test mode, then set test_mode=F and do not need to input a cell_structure
##Always remember A_input = 1-A_ref
NMF_Meta_April13<-function(Y, A, tol=10^-5,num_cell=11,max.itr=2000,test_mode=F,real_H=NA,row_index=seq(1:53),cell_structure=NA,correlation="p",row_mean=row_mean){
consistency_table <- matrix(rep(0,27),ncol=3)
real_corr_table   <- matrix(rep(0,27),ncol=3)
Y <- as.matrix(Y)
##########################################no permutation case#############################################
##Iterate over beta=0.05,beta=100 and data-dependent beta
Y <- Y[row_index,]
#browser()
Y_normal_row <- as.matrix(Y/row_mean[row_index])
Y_normal_row_col <- sqrt( nrow(Y_normal_row) )*t(t(Y_normal_row)/sqrt(apply(Y_normal_row^2, 2,sum)))
A <- A[row_index,]
##first specification of parameter
##non data dependent
lam_W =5000;
beta_W = 0.05; eta=200;
result1=list(1)
#1st column, 1:3 rows
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y,lam_W=lam_W, beta_W = beta_W, A=A, eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0, perm_type=0)
result1[[scaling+1]]=deconvo_result0}
#2nd column, 1:3 rows
result2=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y_normal_row,lam_W = lam_W, beta_W = beta_W, A=A,eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result2[[scaling+1]]=deconvo_result1}
#3rd column, 1:3 rows
result3=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta= eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result3[[scaling+1]]=deconvo_result2}
##second specification of parameter
##non data dependent
lam_W =5000;
beta_W = 100; eta=200;
#4th column, 1:3 rows
#browser()
result4=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y,lam_W = lam_W, beta_W = beta_W, A=A, eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result4[[scaling+1]]=deconvo_result0}
#5th column, 1:3 rows
result5=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y_normal_row,lam_W = lam_W, beta_W = beta_W, A=A,eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result5[[scaling+1]]=deconvo_result1}
#6th column, 1:3 rows
result6=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0,perm_type=0)
result6[[scaling+1]]=deconvo_result2}
##3rd specification of parameter
##data dependent
reg_para=1
#7th column, 1:3 rows
result7=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y,lam_W = lam_W, beta_W = beta_W, A=A, eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1,perm_type=0)
result7[[scaling+1]]=deconvo_result0}
#8th column, 1:3 rows
result8=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y_normal_row,lam_W = lam_W, beta_W = beta_W, A=A,eta = eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1,perm_type=0)
result8[[scaling+1]]=deconvo_result1}
#9th column, 1:3 rows
result9=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1,perm_type=0)
result9[[scaling+1]]=deconvo_result2}
result_non_permut=list(result1,result2,result3,result4,result5,result6,result7,result8,result9)
###################################end of no permutation case#########################################
##################################start of permutation section#######################################
# browser()
Y <- as.matrix(Y)
ncolY=ncol(Y); rand_perm=sample(1:ncolY)
Y2=as.matrix(Y[,rand_perm])
if (test_mode==T){
real_H_permut <- real_H[,rand_perm]
}
##Iterate over beta=0.05,beta=100 and data-dependent beta
Y2_normal_row <- as.matrix(Y2/row_mean[row_index])
Y2_normal_row_col <- as.matrix(sqrt( nrow(Y2_normal_row) )*t(t(Y2_normal_row)/sqrt(apply(Y2_normal_row^2, 2,sum))))
##first specification of parameter
##non data dependent
lam_W =5000;
beta_W = 0.05; eta=200;
result1=list(1)
#1st column, 1:3 rows
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result1[[scaling+1]]=deconvo_result0}
#2nd column, 1:3 rows
result2=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result2[[scaling+1]]=deconvo_result1}
#3rd column, 1:3 rows
result3=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result3[[scaling+1]]=deconvo_result2}
##second specification of parameter
##non data dependent
lam_W =5000;
beta_W = 100; eta=200;
#4th column, 1:3 rows
result4=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result4[[scaling+1]]=deconvo_result0}
#5th column, 1:3 rows
result5=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result5[[scaling+1]]=deconvo_result1}
#6th column, 1:3 rows
result6=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=0)
result6[[scaling+1]]=deconvo_result2}
##3rd specification of parameter
##data dependent
reg_para=1
#7th column, 1:3 rows
result7=list(1)
for (scaling in 0:2){
deconvo_result0 <- NMF_RNA_Tang_ind(Y2,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result7[[scaling+1]]=deconvo_result0}
#8th column, 1:3 rows
result8=list(1)
for (scaling in 0:2){
deconvo_result1 <- NMF_RNA_Tang_ind(Y2_normal_row,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result8[[scaling+1]]=deconvo_result1}
#9th column, 1:3 rows
result9=list(1)
for (scaling in 0:2){
deconvo_result2 <- NMF_RNA_Tang_ind(Y2_normal_row_col,lam_W = lam_W, beta_W = beta_W, A=A, eta=eta, tol=tol,max.itr=max.itr,num_cell=num_cell,normal_H=T,scale_Data=scaling,reg_para=1)
result9[[scaling+1]]=deconvo_result2}
result_permut=list(result1,result2,result3,result4,result5,result6,result7,result8,result9)
##in the test mode, if the labelled data has different cell types with us, we rearrange the results based on cell_structure
transform_H <- function(input_H,cell_structure){
dest_index <- sort(unique(cell_structure$destin_index))
outcome_H <- matrix(rep(0,ncol(input_H)*max(dest_index)),ncol=ncol(input_H))
for (i in 1:num_cell){
if ( !is.na(cell_structure$destin_index[i]) ){
outcome_H[cell_structure$destin_index[i],] <- outcome_H[cell_structure$destin_index[i],]+input_H[i,]
}
}
return(outcome_H)
}
##################end of function##########################
################generate output consistency table##########
#fxn for K-L divergence
kl_div_disc <- function(aa,bb){
aa=aa/sum(aa); bb=bb/sum(bb); clength=length(aa); aa=pmax(aa,10^(-30)); bb=pmax(bb,10^(-30));
return(sum(aa*log(aa/bb)))}
for (i1 in 1:9){
for (i2 in 1:3){
consistency_table[i1,i2]=mean(diag(cor(result_permut[[i1]][[i2]]$H,(result_non_permut[[i1]][[i2]]$H[,rand_perm]) ) ) )
}}
######generate output real correlation table (onlly in test mode)########
if (test_mode==T){
for (i1 in 1:9){
for (i2 in 1:3){
if (correlation=="p"){
real_corr_table[i1,i2]=mean(diag(cor(transform_H(result_non_permut[[i1]][[i2]]$H, cell_structure),(real_H))))
}
if (correlation=="s"){
real_corr_table[i1,i2]=mean(diag(cor(transform_H(result_non_permut[[i1]][[i2]]$H, cell_structure),(real_H),method = "spearman" ) ) )
}
if (correlation=="kl"){
temp_kl <- rep(-1,ncol(Y))
trans_H<-transform_H(result_non_permut[[i1]][[i2]]$H , cell_structure)
for (kl in 1:4){
temp_kl[kl] <- kl_div_disc( aa = real_H[,kl], bb=trans_H[,kl])
}
real_corr_table[i1,i2]=mean(temp_kl)
}
}}
}
#####Final Quality Control Stage######
#filtered by column sum
#column sum table for 27 Hs
H_dist=array(0,c(9,3))
for (i1 in 1:9){
for (i2 in 1:3){
H_dist[i1,i2]=mean(apply(result_non_permut[[i1]][[i2]]$H,2,sum))
}
}
report_consistency_table<-consistency_table*(H_dist<1.1)
#rreal_tab1
#consider_col=1:9;   #c(1,4,7)
#thres_H=1.05;   # thres_H=200
#rankk=cbind(1:27, -as.vector(ccons_tab[,consider_col]*(H_dist[,consider_col]<thres_H)), as.vector(rreal_tab1[,consider_col]))
#rankk2=rankk[order(rankk[,2]),]
#plot(1:27, rankk2[,3])
#####output results#############
if (test_mode==T){
return(list(consistency_table=report_consistency_table,real_corr_table=real_corr_table,real_corr_table=real_corr_table,result_non_permut=result_non_permut))}
else {
return(list(consistency_table=report_consistency_table,result_non_permut=result_non_permut))
}
}
devtools::load_all(".")
